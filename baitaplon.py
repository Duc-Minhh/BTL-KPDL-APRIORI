# -*- coding: utf-8 -*-
"""BaiTapLon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11F8yIg9GJXuRNjXdQ88Rq2XLZMQtkmnx
"""

!pip install mlxtend --quiet
!pip install pandas numpy matplotlib --quiet

from google.colab import drive
drive.mount('/content/drive/')

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/Groceries_dataset.csv')
print("Dữ liệu ban đầu: ", data.shape)
print("5 Bộ dữ liệu đầu tiên", data.head)

"""Làm sạch dữ liệu cơ bản"""

import re
data['Date'] = pd.to_datetime(data['Date'], dayfirst = True, errors = 'coerce')
data = data.dropna(subset = ['Date'])
data['itemDescription'] = data['itemDescription'].astype(str)
data = data[data['itemDescription'].str.strip() != '']
def clean_item(s):
  s = str(s).lower().strip()
  s = re.sub(r'[/\\]', ' ', s)   # thay / hoặc \ bằng khoảng trắng
  s = re.sub(r'[^a-z0-9\s\-\&]', ' ', s) # chỉ giữ lại chữ, số, -, &, khoảng trắng
  s = re.sub(r'\s*-\s*', '-', s) # chuẩn hoá dấu gạch ngang
  s = re.sub(r'\s*&\s*', '&', s)# chuẩn hoá dấu &
  s = re.sub(r'\s+', ' ', s).strip() # loại bỏ khoảng trắng thừa
  return s
data['item_clean'] = data['itemDescription'].apply(clean_item)

"""Xây dựng mã giao dịch

"""

data['Member_number'] = data['Member_number'].astype(str)
data['TransID'] = data['Member_number'] + '_' + data['Date'].dt.strftime('%Y-%m-%d')

"""Gom các mặt hàng trong cùng giao dịch"""

transactions = (
    data.groupby('TransID')['item_clean'].apply(lambda x: list(dict.fromkeys(x))).tolist()
)

"""Đếm và lọc mặt hàng hiếm"""

from collections import Counter
cnt = Counter(it for t in transactions for it in t)
print("Số giao dịch ban đầu: ", len(transactions))
print("Top items: ", cnt.most_common(15))
min_count = 5
freq_items = {it for it, c in cnt.items() if c >= min_count}
transactions = [[it for it in t if it in freq_items] for t in transactions]
transactions = [t for t in transactions if len(t) >= 1]

"""Chuyển sang dạng one-hot encoding chuẩn bị cho khai phá luật kết hợp"""

from mlxtend.preprocessing import TransactionEncoder
te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df_onehot = pd.DataFrame(te_ary, columns = te.columns_)
df_onehot.to_csv('groceries_onehot.csv', index=False)
print("One-hot saved, shape: ", df_onehot.shape)

"""Chạy apriori"""

from mlxtend.frequent_patterns import apriori, association_rules
min_support = 0.01
frequent_itemsets = apriori(
    df_onehot,
    min_support = min_support,
    use_colnames=True, #Giữ tên sản phẩm thay vì index cột
    max_len = 3        # Chỉ xét tối đa 3 sản phẩm / tập
)
# Sắp xếp để xem các tập phổ biến nhất
frequent_itemsets = frequent_itemsets.sort_values(by = "support", ascending=False)
print("Số tập phổ biến tìm được: ", frequent_itemsets.shape[0])
print("Top 10 tâp phổ biến nhất: ")
print(frequent_itemsets.head(10))
#Lưu lai
frequent_itemsets.to_csv("frequent_itemsets.csv", index = False)
print("Đã lưu frequent_itemsets.csv")

"""Sinh luật kết hợp từ các tập"""

#Tạo các luật dựa trêm chỉ số "confidence"
#min_threshold ở đây chính là min_confidence
rules = association_rules(
    frequent_itemsets,
    metric = "confidence",
    min_threshold = 0.3 #Chỉ lấy cấc luật có độ tin cậy >= 30%
)
# Thêm độ dài vế trái để tiện lọc luật dạng "mua combo -> mua thêm gì"
rules["antecedent_len"] = rules["antecedents"].apply(lambda x: len(x))
#Sắp xếp luật theo lift (độ "thú vị", >1 nghĩa là có liên kết dương)
rules_sorted = rules.sort_values(by = "lift", ascending = False)
print("Tổng số luật tạo ra: ", rules_sorted.shape[0])
print("Top 10 luật lift cao nhất")
cols_show=[
    "antecedents", "consequents",
    "support", "confidence","lift",
    "antecedent_len"
]
print(rules_sorted[cols_show].head(10))
#lưu file
rules_sorted.to_csv("all_association_rules.csv", index = False)
print("Đã lưu all_association_rules.csv")